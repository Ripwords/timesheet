---
description: 
globs: 
alwaysApply: true
---

**Overall Architecture:**

*   **Client-Server Model:** The application now operates with a central backend server managing data and logic, serving multiple clients.
*   **Backend:** ElysiaJS server handling API requests and database interactions.
*   **Database:** PostgreSQL (inferred from `drizzle-orm/pg-core`) managed via Drizzle ORM.
*   **Clients:**
    *   **Tauri Desktop App:** Likely the primary interface for users to perform core time tracking actions.
    *   **Nuxt Web Dashboard:** Primarily for user registration, administration tasks, and potentially viewing history/managing profile for regular users.

**Backend & Data Model (`schema.ts`):**

1.  **User Management:**
    *   Store user information (`users` table: `id`, `email`, `passwordHash`).
    *   Support distinct user roles (`userRoleEnum`: `admin`, `user`).
    *   Implement email verification (`emailVerified`, `verificationToken`).
2.  **Authentication & Security:**
    *   Secure password storage (hashing required).
    *   Implement password reset functionality (`resetPasswordTokens` table).
    *   API endpoints likely require authentication (e.g., JWT).
3.  **Project Management:**
    *   Define and store projects (`projects` table: `id`, `name`).
4.  **Time Tracking:**
    *   Store detailed time entries (`timeEntries` table: `id`, `startTime`, `endTime`, `durationSeconds`).
    *   Associate time entries with specific users (`userId` foreign key to `users`).
    *   Associate time entries with specific projects (`projectId` foreign key to `projects`).
    *   Store timestamps with time zone information (`withTimezone: true`).

**Functionality (Distributed across clients):**

1.  **Authentication:**
    *   User **Registration** (Likely via Nuxt Dashboard).
    *   User **Login** (Both Tauri App and Nuxt Dashboard).
    *   **Email Verification** flow.
    *   **Password Reset** flow (Request and confirmation).
2.  **Core Time Tracking (Likely Tauri App):**
    *   **Start/Pause/Resume/End** timer functionality within the desktop app.
    *   On **End Session**:
        *   Prompt user to select a **Project** (list fetched from the backend).
        *   Send the completed `timeEntry` (with `userId`, `projectId`, `startTime`, `endTime`, `durationSeconds`) to the backend API for storage.
    *   Display user's recent time entries (data fetched from backend).
3.  **Project Management (Likely Nuxt Dashboard/Admin or potentially Tauri):**
    *   Ability to **Create, Read, Update, Delete (CRUD)** projects (API endpoints needed). Access might be role-restricted (e.g., admins).
4.  **Web Dashboard (Nuxt):**
    *   **User Registration** interface.
    *   **Login** interface.
    *   **Admin Panel:**
        *   View list of users.
        *   Potentially manage user roles or verification status.
        *   Potentially view/manage all projects and time entries.
    *   **User View:**
        *   Allow logged-in users to view their own time entry history.
        *   Profile/Password management.
5.  **Data Persistence:**
    *   All core data (`users`, `projects`, `timeEntries`, tokens) is persisted in the **backend PostgreSQL database**.
    *   Client-side `localStorage` is likely now only used for storing authentication tokens (e.g., JWT) or temporary UI state, not primary application data.

This reflects a more robust, multi-user, multi-platform application compared to the initial frontend-only concept.
